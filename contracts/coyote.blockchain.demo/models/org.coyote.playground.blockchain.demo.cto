/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.coyote.playground.blockchain.demo

/**
 * The type of perishable product being shipped
 */
enum ProductType {
  o BANANAS
  o APPLES
  o PEARS
  o PEACHES
  o COFFEE
}

/**
 * The status of a shipment
 */
enum ShipmentStatus {
  o CREATED
  o ACCEPTED
  o IN_TRANSIT  
  o ARRIVED
}

/**
 * Directions of the compass
 */
enum CompassDirection {
  o N
  o S
  o E
  o W
}

/**
 * An abstract transaction that is related to a Shipment
 */
abstract transaction ShipmentTransaction {
    --> Shipment shipment
}

/**
 * An temperature reading for a shipment. E.g. received from a
 * device within a temperature controlled shipping container
 */
transaction TemperatureReading extends ShipmentTransaction {
  o Double centigrade
}

/**
 * A GPS reading for a shipment. E.g. received from a device
 * within a shipping container
 */
transaction GpsReading extends ShipmentTransaction {
  o String readingTime
  o String readingDate
  o String latitude
  o CompassDirection latitudeDir
  o String longitude
  o CompassDirection longitudeDir
}

/**
 * A notification that a shipment has been received by the
 * customer and that funds should be transferred from the customer
 * to the broker and broker to carrier to pay for the shipment.
 */
transaction ShipmentReceived extends ShipmentTransaction {
}

/**
 * A notification that a shipment has been accepted by the
 * carrier 
 */
transaction ShipmentAccepted extends ShipmentTransaction {
}

/**
 * A shipment being tracked as an asset on the ledger
 */
asset Shipment identified by shipmentId {
  o String shipmentId
  o ProductType type
  o ShipmentStatus status
  o Long unitCount
  --> Contract contract
  o TemperatureReading[] temperatureReadings optional
  o GpsReading[] gpsReadings optional
}

/**
 * Defines a contract between a Customer and Broker to ship using
 * a Carrier, paying a set unit price. The unit price is multiplied by
 * a penality factor proportional to the deviation from the min and max
 * negociated temperatures for the shipment.
 */
asset Contract identified by contractId {
  o String contractId
  --> Customer customer
  --> Carrier carrier
  --> Broker broker
  --> Facility origin
  --> Facility destination

  o DateTime arrivalDateTime
  o Double unitPrice
  o Double brokerMargin
  o Double minTemperature
  o Double maxTemperature
  o Double minPenaltyFactor
  o Double maxPenaltyFactor
}

/**
 * A concept for a simple street address
 */
concept Address {
  o String city optional
  o String country
  o String street optional
  o String zip optional
  o String continent optional
}

/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by email {
  o String name
  o String code
  o String email
  o String address
  o Double accountBalance
}

/**
 * A Customer is a type of participant in the network
 */
participant Customer extends Business {
}

/**
 * A Carrier is a type of participant in the network
 */
participant Carrier extends Business {
}

/**
 * A Broker is a type of participant in the network
 */
participant Broker extends Business {
}


/**
 * A Factility is a type of participant in the network
 */
participant  Facility identified by email {
  o String email
  o String location
}

/**
 * An event - when the temperature goes outside the agreed-upon boundaries
 */
event TemperatureThresholdEvent {
  o String message
  o Double temperature
  --> Shipment shipment
}

/**
 * An event - when the ship updates its location
 */
event ShipmentInPortEvent {
  o String message
  --> Shipment shipment
}


/**
 * An event - when the shipment arrives at the destination
 */
event ShipmentHasArrived {
  o String message
  o Double shipmentAmount
  o Double penalty  
  --> Shipment shipment
}

/**
 * An event - when the shipment arrives at the destination
 */
event ShipmentAcceptedError {
  o String message   
  --> Shipment shipment
}
